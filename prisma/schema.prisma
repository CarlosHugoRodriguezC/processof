// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductionLineHistory {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  comments       String?
  stage          Stage          @relation(fields: [stageId], references: [id])
  stageId        String         @db.ObjectId
  productionLine ProductionLine @relation(fields: [orderId], references: [id])
  orderId        String         @db.ObjectId
  startedAt      DateTime       @default(now())
  endedAt        DateTime       @updatedAt
}

model ProductionLine {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  description           String?
  deleted               Boolean                 @default(false)
  stages                Stage[]
  orders                Order[]
  productionLineHistory ProductionLineHistory[]
}

model Stage {
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  order       Int
  deleted     Boolean                 @default(false)
  images      Image[]
  history     ProductionLineHistory[]
  line        ProductionLine          @relation(fields: [lineId], references: [id])
  lineId      String                  @db.ObjectId
}

model Image {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  description String?
  deleted     Boolean @default(false)
  stage       Stage   @relation(fields: [stageId], references: [id])
  stageId     String  @db.ObjectId
}

model Order {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  status         OrderStatus
  customerName   String
  customerEmail  String
  productionLine ProductionLine @relation(fields: [lineId], references: [id])
  lineId         String         @db.ObjectId
  deleted        Boolean        @default(false)
  createdAt      DateTime       @default(now())
  createdBy      User           @relation("CreatedBy", fields: [createdById], references: [id])
  createdById    String         @db.ObjectId
  updatedAt      DateTime       @updatedAt
  updatedBy      User           @relation("UpdatedBy", fields: [updatedById], references: [id])
  updatedById    String         @db.ObjectId
}

enum OrderStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(USER)
  deleted       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  created       Order[]   @relation("CreatedBy")
  updated       Order[]   @relation("UpdatedBy")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  DATA_ENTRY_OPERATOR
  DESIGNER
  USER
}
